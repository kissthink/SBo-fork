#!/bin/sh

# Slackware build script for Octave-Forge

# Written by Mauro Giachero (mauro dot giachero at gmail dot com)

# Copyright 2008  Mauro Giachero
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# There are some caveats related to this script:
# - Even setting ARCH=i486, the binary parts of the packages are put
#   in directories named `uname -m`-*. This is just cosmetic, as ARCH
#   is actually used to set compiler flags and you really get i486
#   binaries.
# - On package removal, you should run as root:
#     mkdir -p /usr/share/octave/packages && octave --silent --eval "pkg rebuild"
#   or Octave will be left in an incorrect state.
# - No JOBS support.

PRGNAM=octave-forge
VERSION=bundle_20090607
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}

SRCVER=$(printf $VERSION | tr _ -)

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686 -fno-strict-aliasing"
  SLKPICFLAG="-fPIC"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686 -fno-strict-aliasing"
  SLKPICFLAG="-fPIC"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fno-strict-aliasing"
  SLKPICFLAG="-fPIC"
fi

# The Octave-Forge packages are divided into four repositories.
# By default this script builds all packages from all repositories,
# but you can explicitly set which repositories you are interested in.
REPOS=${REPOS:-"main,extra,language,nonfree"}

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$SRCVER
tar xvf $CWD/$PRGNAM-$SRCVER.tar.gz
cd $PRGNAM-$SRCVER
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# Prepare the build
( cd $PKG
  mkdir -p usr/share/octave/packages
  mkdir -p usr/libexec/octave/packages
)

# Compile the application and install it into the $PKG directory
CFLAGS=$SLKCFLAGS \
CXXFLAGS=$SLKCFLAGS \
FFLAGS=$SLKCFLAGS \
CPICFLAG=$SLKPICFLAG \
CXXPICFLAG=$SLKPICFLAG \
FPICFLAG=$SLKPICFLAG \
octave --silent \
       --eval "pkg_prefix='$PKG';$(echo $REPOS, |sed "s/,/=1;/g")" \
       $CWD/installscript.m
# Remove package registers (we don't want these in the package)
( cd $PKG
  rm ll gl
)

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild
cat $CWD/generate-installscript.sh > $PKG/usr/doc/$PRGNAM-$VERSION/generate-installscript.sh
cat $CWD/installscript.m > $PKG/usr/doc/$PRGNAM-$VERSION/installscript.m

mkdir -p $PKG/install
cat $CWD/doinst.sh > $PKG/install/doinst.sh
cat $CWD/slack-desc > $PKG/install/slack-desc

( cd $PKG
  /sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
)

# Print a brief compilation report
# This is useful to let the packager know which packages were
# really built (the script has to assume some failures).
echo "*** Compilation report ***"
for i in `cat installed.tmp`; do
  echo "$i[70G[[0;32m  OK   [0m]"
done
for i in `cat skipped.tmp`; do
  echo "$i[70G[[0;33m SKIP  [0m]"
done
for i in `cat broken.tmp`; do
  echo "$i[70G[[0;31m ERROR [0m]"
done
echo "Package creation complete."
