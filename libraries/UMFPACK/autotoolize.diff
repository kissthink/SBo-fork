diff --git a/Demo/Makefile.am b/Demo/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Demo/Makefile.am
@@ -0,0 +1,152 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(AMD_CFLAGS) $(UFCONFIG_CFLAGS)
+LDADD = $(top_builddir)/Source/libumfpack.la
+
+EXTRA_DIST = \
+	umfpack_di_demo.out \
+	umfpack_dl_demo.out \
+	umfpack_zi_demo.out \
+	umfpack_zl_demo.out \
+	umf4.out \
+	umf4hb.out \
+	umf4hb64.out \
+	umf4zhb.out
+
+# Disable the .out implicit pattern rule.  Prevents GNU make from
+# adding bogus dependencies for the .out files listed above.
+%.out: %
+
+SIMPLE = \
+	umfpack_simple
+
+DEMO = \
+	umfpack_di_demo \
+	umfpack_dl_demo \
+	umfpack_zi_demo \
+	umfpack_zl_demo
+
+READHB = \
+	readhb \
+	readhb_nozeros \
+	readhb_size
+
+UMF4 = \
+	umf4
+
+UMF4HB = \
+	umf4hb \
+	umf4hb64 \
+	umf4zhb
+
+HB = \
+	HB/arc130.rua \
+	HB/can_24.psa \
+	HB/fs_183_6.rua \
+	HB/qc324.cua \
+	HB/west0067.rua
+
+umfpack_%_demo.c: umfpack_xx_demo.c umfpack_%_demo.sed
+	-sed -f umfpack_$*_demo.sed < umfpack_xx_demo.c > umfpack_$*_demo.c
+
+dist_noinst_DATA = \
+	umfpack_xx_demo.c \
+	umfpack_di_demo.sed \
+	umfpack_dl_demo.sed \
+	umfpack_zi_demo.sed \
+	umfpack_zl_demo.sed \
+	$(HB)
+
+dist_noinst_SCRIPTS = \
+	dodefault \
+	dospd
+
+check_PROGRAMS = \
+	$(SIMPLE) \
+	$(DEMO) \
+	$(READHB) \
+	$(UMF4) \
+	$(UMF4HB)
+
+check_LTLIBRARIES = \
+	libumf4_f77wrapper.la \
+	libumf4_f77zwrapper.la \
+	libumf4_f77wrapper64.la \
+	libumf4_f77zwrapper64.la
+
+umfpack_simple_SOURCES = umfpack_simple.c
+umfpack_di_demo_SOURCES = umfpack_di_demo.c
+umfpack_dl_demo_SOURCES = umfpack_dl_demo.c
+umfpack_zi_demo_SOURCES = umfpack_zi_demo.c
+umfpack_zl_demo_SOURCES = umfpack_zl_demo.c
+
+readhb_SOURCES = readhb.f
+readhb_LDADD =
+
+readhb_nozeros_SOURCES = readhb_nozeros.f
+readhb_nozeros_LDADD =
+
+readhb_size_SOURCES = readhb_size.f
+readhb_size_LDADD =
+
+umf4_SOURCES = umf4.c
+
+umf4hb_SOURCES = umf4hb.f
+umf4hb_LDADD = libumf4_f77wrapper.la $(LDADD)
+
+umf4zhb_SOURCES = umf4zhb.f
+umf4zhb_LDADD = libumf4_f77zwrapper.la $(LDADD)
+
+umf4hb64_SOURCES = umf4hb64.f
+umf4hb64_LDADD = libumf4_f77wrapper64.la $(LDADD)
+
+libumf4_f77wrapper_la_SOURCES = umf4_f77wrapper.c
+libumf4_f77wrapper_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libumf4_f77zwrapper_la_SOURCES = umf4_f77zwrapper.c
+libumf4_f77zwrapper_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libumf4_f77wrapper64_la_SOURCES = umf4_f77wrapper.c
+libumf4_f77wrapper64_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libumf4_f77zwrapper64_la_SOURCES = umf4_f77zwrapper.c
+libumf4_f77zwrapper64_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+check-local: $(SIMPLE) $(DEMO) $(DEMO:=.out) $(READHB) $(HB) $(UMF4) $(UMF4HB) $(UMF4HB:=.out)
+	./umfpack_simple
+	./umfpack_di_demo > my_umfpack_di_demo.out
+	-diff -u umfpack_di_demo.out my_umfpack_di_demo.out
+	./umfpack_dl_demo > my_umfpack_dl_demo.out
+	-diff -u umfpack_dl_demo.out my_umfpack_dl_demo.out
+	./umfpack_zi_demo > my_umfpack_zi_demo.out
+	-diff -u umfpack_zi_demo.out my_umfpack_zi_demo.out
+	./umfpack_zl_demo > my_umfpack_zl_demo.out
+	-diff -u umfpack_zl_demo.out my_umfpack_zl_demo.out
+	-./readhb_nozeros < HB/can_24.psa > tmp/A
+	-./readhb_size    < HB/can_24.psa > tmp/Asize
+	-./umf4
+	-./readhb_nozeros < HB/west0067.rua > tmp/A
+	-./readhb_size    < HB/west0067.rua > tmp/Asize
+	-./umf4
+	-./readhb_nozeros < HB/fs_183_6.rua > tmp/A
+	-./readhb_size    < HB/fs_183_6.rua > tmp/Asize
+	-./umf4
+	-./readhb         < HB/fs_183_6.rua > tmp/A
+	-./readhb_size    < HB/fs_183_6.rua > tmp/Asize
+	-./umf4
+	-./readhb         < HB/arc130.rua > tmp/A
+	-./readhb_size    < HB/arc130.rua > tmp/Asize
+	-./umf4
+	-./readhb_nozeros < HB/arc130.rua > tmp/A
+	-./readhb_size    < HB/arc130.rua > tmp/Asize
+	-./umf4
+	-./readhb_nozeros < HB/arc130.rua > tmp/A
+	-./readhb_size    < HB/arc130.rua > tmp/Asize
+	-./umf4 a 1e-6
+	-./umf4hb < HB/west0067.rua > my_umf4hb.out
+	-diff -u umf4hb.out my_umf4hb.out
+	-./umf4zhb < HB/qc324.cua > my_umf4zhb.out
+	-diff -u umf4zhb.out my_umf4zhb.out
+	-./umf4hb64 < HB/west0067.rua > my_umf4hb64.out
+	-diff -u umf4hb64.out my_umf4hb64.out
+
+clean-local:
+	-$(RM) my_*.out
diff --git a/Doc/Makefile.am b/Doc/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Doc/Makefile.am
@@ -0,0 +1,66 @@
+EXTRA_DIST = \
+	ChangeLog \
+	License \
+	gpl.txt
+
+dist_noinst_DATA = \
+	QuickStart.tex \
+	UserGuide.bib \
+	UserGuide.sed1 \
+	UserGuide.sed2 \
+	UserGuide.stex
+
+pdf_DATA = \
+	QuickStart.pdf \
+	UserGuide.pdf
+
+SRC = \
+	../Demo/umfpack_simple.c \
+	../Include/umfpack_col_to_triplet.h \
+	../Include/umfpack_defaults.h \
+	../Include/umfpack_free_numeric.h \
+	../Include/umfpack_free_symbolic.h \
+	../Include/umfpack_get_determinant.h \
+	../Include/umfpack_get_lunz.h \
+	../Include/umfpack_get_numeric.h \
+	../Include/umfpack_get_symbolic.h \
+	../Include/umfpack_load_numeric.h \
+	../Include/umfpack_load_symbolic.h \
+	../Include/umfpack_numeric.h \
+	../Include/umfpack_qsymbolic.h \
+	../Include/umfpack_report_control.h \
+	../Include/umfpack_report_info.h \
+	../Include/umfpack_report_matrix.h \
+	../Include/umfpack_report_numeric.h \
+	../Include/umfpack_report_perm.h \
+	../Include/umfpack_report_status.h \
+	../Include/umfpack_report_symbolic.h \
+	../Include/umfpack_report_triplet.h \
+	../Include/umfpack_report_vector.h \
+	../Include/umfpack_save_numeric.h \
+	../Include/umfpack_save_symbolic.h \
+	../Include/umfpack_scale.h \
+	../Include/umfpack_solve.h \
+	../Include/umfpack_symbolic.h \
+	../Include/umfpack_tictoc.h \
+	../Include/umfpack_timer.h \
+	../Include/umfpack_transpose.h \
+	../Include/umfpack_triplet_to_col.h \
+	../Include/umfpack_wsolve.h
+
+UserGuide.tex: UserGuide.stex UserGuide.sed1 UserGuide.sed2 $(SRC)
+	sed -f UserGuide.sed1 < UserGuide.stex | sed -f UserGuide.sed2 | expand -8 > $@
+
+%.pdf: %.tex %.bib
+	pdflatex $*
+	bibtex $*
+	pdflatex $*
+	pdflatex $*
+
+%.pdf: %.tex
+	pdflatex $*
+	pdflatex $*
+
+clean-local:
+	-$(RM) *.aux *.bbl *.blg *.log *.toc
+	-$(RM) UserGuide.tex
diff --git a/Include/Makefile.am b/Include/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Include/Makefile.am
@@ -0,0 +1,35 @@
+pkgincludedir = $(includedir)/umfpack
+pkginclude_HEADERS = \
+	umfpack.h \
+	umfpack_col_to_triplet.h \
+	umfpack_defaults.h \
+	umfpack_free_numeric.h \
+	umfpack_free_symbolic.h \
+	umfpack_get_determinant.h \
+	umfpack_get_lunz.h \
+	umfpack_get_numeric.h \
+	umfpack_get_symbolic.h \
+	umfpack_global.h \
+	umfpack_load_numeric.h \
+	umfpack_load_symbolic.h \
+	umfpack_numeric.h \
+	umfpack_qsymbolic.h \
+	umfpack_report_control.h \
+	umfpack_report_info.h \
+	umfpack_report_matrix.h \
+	umfpack_report_numeric.h \
+	umfpack_report_perm.h \
+	umfpack_report_status.h \
+	umfpack_report_symbolic.h \
+	umfpack_report_triplet.h \
+	umfpack_report_vector.h \
+	umfpack_save_numeric.h \
+	umfpack_save_symbolic.h \
+	umfpack_scale.h \
+	umfpack_solve.h \
+	umfpack_symbolic.h \
+	umfpack_tictoc.h \
+	umfpack_timer.h \
+	umfpack_transpose.h \
+	umfpack_triplet_to_col.h \
+	umfpack_wsolve.h
diff --git a/Makefile.am b/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,5 @@
+SUBDIRS = Include Source Demo Doc
+EXTRA_DIST = README.txt
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = umfpack.pc
diff --git a/Source/Makefile.am b/Source/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Source/Makefile.am
@@ -0,0 +1,315 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(CHOLMOD_CFLAGS) $(AMD_CFLAGS) $(UFCONFIG_CFLAGS)
+AM_CPPFLAGS += $(UMFPACK_NCHOLMOD)
+
+# non-user-callable umf_*.[ch] files:
+UMF = \
+	umf_assemble.c \
+	umf_blas3_update.c \
+	umf_build_tuples.c \
+	umf_create_element.c \
+	umf_dump.c \
+	umf_extend_front.c \
+	umf_garbage_collection.c \
+	umf_get_memory.c \
+	umf_grow_front.c \
+	umf_init_front.c \
+	umf_kernel.c \
+	umf_kernel_init.c \
+	umf_kernel_wrapup.c \
+	umf_local_search.c \
+	umf_lsolve.c \
+	umf_ltsolve.c \
+	umf_mem_alloc_element.c \
+	umf_mem_alloc_head_block.c \
+	umf_mem_alloc_tail_block.c \
+	umf_mem_free_tail_block.c \
+	umf_mem_init_memoryspace.c \
+	umf_report_vector.c \
+	umf_row_search.c \
+	umf_scale.c \
+	umf_scale_column.c \
+	umf_set_stats.c \
+	umf_solve.c \
+	umf_start_front.c \
+	umf_store_lu.c \
+	umf_symbolic_usage.c \
+	umf_transpose.c \
+	umf_triplet.c \
+	umf_tuple_lengths.c \
+	umf_usolve.c \
+	umf_utsolve.c \
+	umf_valid_numeric.c \
+	umf_valid_symbolic.c
+
+# non-user-callable umf_*.[ch] files
+# int/UF_long versions only (no real/complex):
+UMFINT = \
+	umf_analyze.c \
+	umf_apply_order.c \
+	umf_cholmod.c \
+	umf_colamd.c \
+	umf_free.c \
+	umf_fsize.c \
+	umf_is_permutation.c \
+	umf_malloc.c \
+	umf_realloc.c \
+	umf_report_perm.c \
+	umf_singletons.c
+
+# user-callable umfpack_*.c files
+# (int/UF_long and real/complex):
+UMFPACK = \
+	umfpack_col_to_triplet.c \
+	umfpack_defaults.c \
+	umfpack_free_numeric.c \
+	umfpack_free_symbolic.c \
+	umfpack_get_determinant.c \
+	umfpack_get_lunz.c \
+	umfpack_get_numeric.c \
+	umfpack_get_symbolic.c \
+	umfpack_load_numeric.c \
+	umfpack_load_symbolic.c \
+	umfpack_numeric.c \
+	umfpack_qsymbolic.c \
+	umfpack_report_control.c \
+	umfpack_report_info.c \
+	umfpack_report_matrix.c \
+	umfpack_report_numeric.c \
+	umfpack_report_perm.c \
+	umfpack_report_status.c \
+	umfpack_report_symbolic.c \
+	umfpack_report_triplet.c \
+	umfpack_report_vector.c \
+	umfpack_save_numeric.c \
+	umfpack_save_symbolic.c \
+	umfpack_scale.c \
+	umfpack_solve.c \
+	umfpack_symbolic.c \
+	umfpack_transpose.c \
+	umfpack_triplet_to_col.c
+
+# user-callable umfpack_*.c files
+# only one version for int/UF_long, real/complex:
+GENERIC = \
+	umfpack_timer.c \
+	umfpack_tictoc.c \
+	umfpack_global.c
+
+noinst_HEADERS = \
+	cholmod_blas.h \
+	umf_config.h \
+	umf_internal.h \
+	umf_version.h \
+	$(UMF:.c=.h) \
+	$(UMFINT:.c=.h)
+
+noinst_LTLIBRARIES = \
+	libumf_i.la \
+	libumf_l.la \
+	libumf_di_hsolve.la \
+	libumf_di_triplet_map_x.la \
+	libumf_di_triplet_map_nox.la \
+	libumf_di_triplet_nomap_x.la \
+	libumf_di_assemble_fixq.la \
+	libumf_di_store_lu_drop.la \
+	libumf_di.la \
+	libumfpack_di_wsolve.la \
+	libumfpack_di.la \
+	libumf_dl_hsolve.la \
+	libumf_dl_triplet_map_x.la \
+	libumf_dl_triplet_map_nox.la \
+	libumf_dl_triplet_nomap_x.la \
+	libumf_dl_assemble_fixq.la \
+	libumf_dl_store_lu_drop.la \
+	libumf_dl.la \
+	libumfpack_dl_wsolve.la \
+	libumfpack_dl.la \
+	libumf_zi_hsolve.la \
+	libumf_zi_triplet_map_x.la \
+	libumf_zi_triplet_map_nox.la \
+	libumf_zi_triplet_nomap_x.la \
+	libumf_zi_assemble_fixq.la \
+	libumf_zi_store_lu_drop.la \
+	libumf_zi.la \
+	libumfpack_zi_wsolve.la \
+	libumfpack_zi.la \
+	libumf_zl_hsolve.la \
+	libumf_zl_triplet_map_x.la \
+	libumf_zl_triplet_map_nox.la \
+	libumf_zl_triplet_nomap_x.la \
+	libumf_zl_assemble_fixq.la \
+	libumf_zl_store_lu_drop.la \
+	libumf_zl.la \
+	libumfpack_zl_wsolve.la \
+	libumfpack_zl.la
+
+# compile each int and UF_long routine (with no real/complex version)
+libumf_i_la_SOURCES = $(UMFINT)
+libumf_i_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+
+libumf_l_la_SOURCES = $(UMFINT)
+libumf_l_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+# compile each routine in the DI version
+libumf_di_hsolve_la_SOURCES = umf_ltsolve.c umf_utsolve.c
+libumf_di_hsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DCONJUGATE_SOLVE
+
+libumf_di_triplet_map_x_la_SOURCES = umf_triplet.c
+libumf_di_triplet_map_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DDO_MAP -DDO_VALUES
+
+libumf_di_triplet_map_nox_la_SOURCES = umf_triplet.c
+libumf_di_triplet_map_nox_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DDO_MAP
+
+libumf_di_triplet_nomap_x_la_SOURCES = umf_triplet.c
+libumf_di_triplet_nomap_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DDO_VALUES
+
+libumf_di_assemble_fixq_la_SOURCES = umf_assemble.c
+libumf_di_assemble_fixq_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DFIXQ
+
+libumf_di_store_lu_drop_la_SOURCES = umf_store_lu.c
+libumf_di_store_lu_drop_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DDROP
+
+libumf_di_la_SOURCES = $(UMF)
+libumf_di_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+libumf_di_la_LIBADD = \
+	libumf_di_hsolve.la \
+	libumf_di_triplet_map_x.la \
+	libumf_di_triplet_map_nox.la \
+	libumf_di_triplet_nomap_x.la \
+	libumf_di_assemble_fixq.la \
+	libumf_di_store_lu_drop.la
+
+libumfpack_di_wsolve_la_SOURCES = umfpack_solve.c
+libumfpack_di_wsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT -DWSOLVE
+
+libumfpack_di_la_SOURCES = $(UMFPACK)
+libumfpack_di_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+libumfpack_di_la_LIBADD = \
+	libumfpack_di_wsolve.la
+
+# compile each routine in the DL version
+libumf_dl_hsolve_la_SOURCES = umf_ltsolve.c umf_utsolve.c
+libumf_dl_hsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DCONJUGATE_SOLVE
+
+libumf_dl_triplet_map_x_la_SOURCES = umf_triplet.c
+libumf_dl_triplet_map_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DDO_MAP -DDO_VALUES
+
+libumf_dl_triplet_map_nox_la_SOURCES = umf_triplet.c
+libumf_dl_triplet_map_nox_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DDO_MAP
+
+libumf_dl_triplet_nomap_x_la_SOURCES = umf_triplet.c
+libumf_dl_triplet_nomap_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DDO_VALUES
+
+libumf_dl_assemble_fixq_la_SOURCES = umf_assemble.c
+libumf_dl_assemble_fixq_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DFIXQ
+
+libumf_dl_store_lu_drop_la_SOURCES = umf_store_lu.c
+libumf_dl_store_lu_drop_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DDROP
+
+libumf_dl_la_SOURCES = $(UMF)
+libumf_dl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+libumf_dl_la_LIBADD = \
+	libumf_dl_hsolve.la \
+	libumf_dl_triplet_map_x.la \
+	libumf_dl_triplet_map_nox.la \
+	libumf_dl_triplet_nomap_x.la \
+	libumf_dl_assemble_fixq.la \
+	libumf_dl_store_lu_drop.la
+
+libumfpack_dl_wsolve_la_SOURCES = umfpack_solve.c
+libumfpack_dl_wsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG -DWSOLVE
+
+libumfpack_dl_la_SOURCES = $(UMFPACK)
+libumfpack_dl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+libumfpack_dl_la_LIBADD = \
+	libumfpack_dl_wsolve.la
+
+# compile each routine in the ZI version
+libumf_zi_hsolve_la_SOURCES = umf_ltsolve.c umf_utsolve.c
+libumf_zi_hsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DCONJUGATE_SOLVE
+
+libumf_zi_triplet_map_x_la_SOURCES = umf_triplet.c
+libumf_zi_triplet_map_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DDO_MAP -DDO_VALUES
+
+libumf_zi_triplet_map_nox_la_SOURCES = umf_triplet.c
+libumf_zi_triplet_map_nox_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DDO_MAP
+
+libumf_zi_triplet_nomap_x_la_SOURCES = umf_triplet.c
+libumf_zi_triplet_nomap_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DDO_VALUES
+
+libumf_zi_assemble_fixq_la_SOURCES = umf_assemble.c
+libumf_zi_assemble_fixq_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DFIXQ
+
+libumf_zi_store_lu_drop_la_SOURCES = umf_store_lu.c
+libumf_zi_store_lu_drop_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DDROP
+
+libumf_zi_la_SOURCES = $(UMF)
+libumf_zi_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT
+libumf_zi_la_LIBADD = \
+	libumf_zi_hsolve.la \
+	libumf_zi_triplet_map_x.la \
+	libumf_zi_triplet_map_nox.la \
+	libumf_zi_triplet_nomap_x.la \
+	libumf_zi_assemble_fixq.la \
+	libumf_zi_store_lu_drop.la
+
+libumfpack_zi_wsolve_la_SOURCES = umfpack_solve.c
+libumfpack_zi_wsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT -DWSOLVE
+
+libumfpack_zi_la_SOURCES = $(UMFPACK)
+libumfpack_zi_la_CPPFLAGS = $(AM_CPPFLAGS) -DZINT
+libumfpack_zi_la_LIBADD = \
+	libumfpack_zi_wsolve.la
+
+# compile each routine in the ZL version
+libumf_zl_hsolve_la_SOURCES = umf_ltsolve.c umf_utsolve.c
+libumf_zl_hsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DCONJUGATE_SOLVE
+
+libumf_zl_triplet_map_x_la_SOURCES = umf_triplet.c
+libumf_zl_triplet_map_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DDO_MAP -DDO_VALUES
+
+libumf_zl_triplet_map_nox_la_SOURCES = umf_triplet.c
+libumf_zl_triplet_map_nox_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DDO_MAP
+
+libumf_zl_triplet_nomap_x_la_SOURCES = umf_triplet.c
+libumf_zl_triplet_nomap_x_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DDO_VALUES
+
+libumf_zl_assemble_fixq_la_SOURCES = umf_assemble.c
+libumf_zl_assemble_fixq_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DFIXQ
+
+libumf_zl_store_lu_drop_la_SOURCES = umf_store_lu.c
+libumf_zl_store_lu_drop_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DDROP
+
+libumf_zl_la_SOURCES = $(UMF)
+libumf_zl_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG
+libumf_zl_la_LIBADD = \
+	libumf_zl_hsolve.la \
+	libumf_zl_triplet_map_x.la \
+	libumf_zl_triplet_map_nox.la \
+	libumf_zl_triplet_nomap_x.la \
+	libumf_zl_assemble_fixq.la \
+	libumf_zl_store_lu_drop.la
+
+libumfpack_zl_wsolve_la_SOURCES = umfpack_solve.c
+libumfpack_zl_wsolve_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG -DWSOLVE
+
+libumfpack_zl_la_SOURCES = $(UMFPACK)
+libumfpack_zl_la_CPPFLAGS = $(AM_CPPFLAGS) -DZLONG
+libumfpack_zl_la_LIBADD = \
+	libumfpack_zl_wsolve.la
+
+lib_LTLIBRARIES = libumfpack.la
+libumfpack_la_SOURCES = $(GENERIC)
+libumfpack_la_LIBADD = \
+	libumf_i.la \
+	libumf_l.la \
+	libumf_di.la libumfpack_di.la \
+	libumf_dl.la libumfpack_dl.la \
+	libumf_zi.la libumfpack_zi.la \
+	libumf_zl.la libumfpack_zl.la
+
+if CHOLMOD
+libumfpack_la_LIBADD += $(CHOLMOD_LIBS)
+endif
+libumfpack_la_LIBADD += $(AMD_LIBS) $(BLAS_LIBS) -lm
+libumfpack_la_LDFLAGS = -no-undefined -version-info 10:1:5
diff --git a/acx_blas.m4 b/acx_blas.m4
new file mode 100644
--- /dev/null
+++ b/acx_blas.m4
@@ -0,0 +1,191 @@
+##### http://autoconf-archive.cryp.to/acx_blas.html
+#
+# SYNOPSIS
+#
+#   ACX_BLAS([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+#
+# DESCRIPTION
+#
+#   This macro looks for a library that implements the BLAS
+#   linear-algebra interface (see http://www.netlib.org/blas/). On
+#   success, it sets the BLAS_LIBS output variable to hold the
+#   requisite library linkages.
+#
+#   To link with BLAS, you should link with:
+#
+#   	$BLAS_LIBS $LIBS $FLIBS
+#
+#   in that order. FLIBS is the output variable of the
+#   AC_F77_LIBRARY_LDFLAGS macro (called if necessary by ACX_BLAS), and
+#   is sometimes necessary in order to link with F77 libraries. Users
+#   will also need to use AC_F77_DUMMY_MAIN (see the autoconf manual),
+#   for the same reason.
+#
+#   Many libraries are searched for, from ATLAS to CXML to ESSL. The
+#   user may also use --with-blas=<lib> in order to use some specific
+#   BLAS library <lib>. In order to link successfully, however, be
+#   aware that you will probably need to use the same Fortran compiler
+#   (which can be set via the F77 env. var.) as was used to compile the
+#   BLAS library.
+#
+#   ACTION-IF-FOUND is a list of shell commands to run if a BLAS
+#   library is found, and ACTION-IF-NOT-FOUND is a list of commands to
+#   run it if it is not found. If ACTION-IF-FOUND is not specified, the
+#   default action will define HAVE_BLAS.
+#
+#   This macro requires autoconf 2.50 or later.
+#
+# LAST MODIFICATION
+#
+#   2007-07-29
+#
+# COPYLEFT
+#
+#   Copyright (c) 2007 Steven G. Johnson <stevenj@alum.mit.edu>
+#
+#   This program is free software: you can redistribute it and/or
+#   modify it under the terms of the GNU General Public License as
+#   published by the Free Software Foundation, either version 3 of the
+#   License, or (at your option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+#   General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with this program. If not, see
+#   <http://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright
+#   owner gives unlimited permission to copy, distribute and modify the
+#   configure scripts that are the output of Autoconf when processing
+#   the Macro. You need not follow the terms of the GNU General Public
+#   License when using or distributing such scripts, even though
+#   portions of the text of the Macro appear in them. The GNU General
+#   Public License (GPL) does govern all other use of the material that
+#   constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the
+#   Autoconf Macro released by the Autoconf Macro Archive. When you
+#   make and distribute a modified version of the Autoconf Macro, you
+#   may extend this special exception to the GPL to apply to your
+#   modified version as well.
+
+AC_DEFUN([ACX_BLAS], [
+AC_PREREQ(2.50)
+AC_REQUIRE([AC_F77_LIBRARY_LDFLAGS])
+acx_blas_ok=no
+
+AC_ARG_WITH(blas,
+	[AC_HELP_STRING([--with-blas=<lib>], [use BLAS library <lib>])])
+case $with_blas in
+	yes | "") ;;
+	no) acx_blas_ok=disable ;;
+	-* | */* | *.a | *.so | *.so.* | *.o) BLAS_LIBS="$with_blas" ;;
+	*) BLAS_LIBS="-l$with_blas" ;;
+esac
+
+# Get fortran linker names of BLAS functions to check for.
+AC_F77_FUNC(sgemm)
+AC_F77_FUNC(dgemm)
+
+acx_blas_save_LIBS="$LIBS"
+LIBS="$LIBS $FLIBS"
+
+# First, check BLAS_LIBS environment variable
+if test $acx_blas_ok = no; then
+if test "x$BLAS_LIBS" != x; then
+	save_LIBS="$LIBS"; LIBS="$BLAS_LIBS $LIBS"
+	AC_MSG_CHECKING([for $sgemm in $BLAS_LIBS])
+	AC_TRY_LINK_FUNC($sgemm, [acx_blas_ok=yes], [BLAS_LIBS=""])
+	AC_MSG_RESULT($acx_blas_ok)
+	LIBS="$save_LIBS"
+fi
+fi
+
+# BLAS linked to by default?  (happens on some supercomputers)
+if test $acx_blas_ok = no; then
+	save_LIBS="$LIBS"; LIBS="$LIBS"
+	AC_CHECK_FUNC($sgemm, [acx_blas_ok=yes])
+	LIBS="$save_LIBS"
+fi
+
+# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)
+if test $acx_blas_ok = no; then
+	AC_CHECK_LIB(atlas, ATL_xerbla,
+		[AC_CHECK_LIB(f77blas, $sgemm,
+		[AC_CHECK_LIB(cblas, cblas_dgemm,
+			[acx_blas_ok=yes
+			 BLAS_LIBS="-lcblas -lf77blas -latlas"],
+			[], [-lf77blas -latlas])],
+			[], [-latlas])])
+fi
+
+# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)
+if test $acx_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm,
+		[AC_CHECK_LIB(dgemm, $dgemm,
+		[AC_CHECK_LIB(sgemm, $sgemm,
+			[acx_blas_ok=yes; BLAS_LIBS="-lsgemm -ldgemm -lblas"],
+			[], [-lblas])],
+			[], [-lblas])])
+fi
+
+# BLAS in Alpha CXML library?
+if test $acx_blas_ok = no; then
+	AC_CHECK_LIB(cxml, $sgemm, [acx_blas_ok=yes;BLAS_LIBS="-lcxml"])
+fi
+
+# BLAS in Alpha DXML library? (now called CXML, see above)
+if test $acx_blas_ok = no; then
+	AC_CHECK_LIB(dxml, $sgemm, [acx_blas_ok=yes;BLAS_LIBS="-ldxml"])
+fi
+
+# BLAS in Sun Performance library?
+if test $acx_blas_ok = no; then
+	if test "x$GCC" != xyes; then # only works with Sun CC
+		AC_CHECK_LIB(sunmath, acosp,
+			[AC_CHECK_LIB(sunperf, $sgemm,
+        			[BLAS_LIBS="-xlic_lib=sunperf -lsunmath"
+                                 acx_blas_ok=yes],[],[-lsunmath])])
+	fi
+fi
+
+# BLAS in SCSL library?  (SGI/Cray Scientific Library)
+if test $acx_blas_ok = no; then
+	AC_CHECK_LIB(scs, $sgemm, [acx_blas_ok=yes; BLAS_LIBS="-lscs"])
+fi
+
+# BLAS in SGIMATH library?
+if test $acx_blas_ok = no; then
+	AC_CHECK_LIB(complib.sgimath, $sgemm,
+		     [acx_blas_ok=yes; BLAS_LIBS="-lcomplib.sgimath"])
+fi
+
+# BLAS in IBM ESSL library? (requires generic BLAS lib, too)
+if test $acx_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm,
+		[AC_CHECK_LIB(essl, $sgemm,
+			[acx_blas_ok=yes; BLAS_LIBS="-lessl -lblas"],
+			[], [-lblas $FLIBS])])
+fi
+
+# Generic BLAS library?
+if test $acx_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm, [acx_blas_ok=yes; BLAS_LIBS="-lblas"])
+fi
+
+AC_SUBST(BLAS_LIBS)
+
+LIBS="$acx_blas_save_LIBS"
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$acx_blas_ok" = xyes; then
+        ifelse([$1],,AC_DEFINE(HAVE_BLAS,1,[Define if you have a BLAS library.]),[$1])
+        :
+else
+        acx_blas_ok=no
+        $2
+fi
+])dnl ACX_BLAS
diff --git a/configure.ac b/configure.ac
new file mode 100644
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,72 @@
+AC_PREREQ([2.68])
+AC_INIT([UMFPACK],[5.5.1],[davis@cise.ufl.edu])
+AC_CONFIG_SRCDIR([Source/umfpack_global.c])
+AC_CONFIG_HEADER([config.h])
+AM_INIT_AUTOMAKE([foreign])
+LT_INIT
+
+AC_PROG_INSTALL
+AC_PROG_CC
+AC_PROG_F77
+
+AC_MSG_CHECKING([whether to use cholmod])
+AC_ARG_WITH([cholmod],
+	[AS_HELP_STRING(
+		[--with-cholmod],
+		[Use CHOLMOD for ordering methods @<:@default=yes@:>@])],
+	[with_cholmod=$withval],
+	[with_cholmod="yes"])
+AC_MSG_RESULT([$with_cholmod])
+
+if test "x$with_cholmod" = "xno"; then
+	AC_DEFINE([NCHOLMOD], [], [Define to disable CHOLMOD])
+	AC_SUBST([UMFPACK_NCHOLMOD], ["-DNCHOLMOD"])
+fi
+
+LIBS_SAVED=$LIBS
+
+AC_CHECK_LIB([m], [sqrt])
+
+AC_CHECK_HEADERS([float.h stdlib.h string.h sys/time.h unistd.h])
+
+PKG_PROG_PKG_CONFIG
+PKG_CHECK_MODULES([UFCONFIG],[ufconfig],
+	[],
+	[AC_MSG_ERROR([cannot find ufconfig])])
+PKG_CHECK_MODULES([AMD],[amd],
+	[],
+	[AC_MSG_ERROR([cannot find amd])])
+UMFPACK_REQUIRES="ufconfig amd"
+
+sinclude(acx_blas.m4)
+ACX_BLAS
+if test "x$BLAS_LIBS" = "x"; then
+	AC_MSG_ERROR([cannot find blas libraries])
+fi
+
+if test "x$with_cholmod" = "xyes"; then
+	PKG_CHECK_MODULES([CHOLMOD],[cholmod],
+		[UMFPACK_REQUIRES="$UMFPACK_REQUIRES cholmod"],
+		[AC_MSG_ERROR([cannot find cholmod])])
+fi
+
+AC_TYPE_SIZE_T
+
+AC_FUNC_ERROR_AT_LINE
+AC_FUNC_MALLOC
+AC_CHECK_FUNCS([clock_gettime pow sqrt])
+
+LIBS=$LIBS_SAVED
+
+AM_CONDITIONAL([CHOLMOD], [test "x$with_cholmod" = "xyes"])
+
+AC_SUBST([UMFPACK_REQUIRES])
+
+AC_CONFIG_FILES([
+	umfpack.pc
+	Makefile
+	Demo/Makefile
+	Doc/Makefile
+	Include/Makefile
+	Source/Makefile])
+AC_OUTPUT
diff --git a/umfpack.pc.in b/umfpack.pc.in
new file mode 100644
--- /dev/null
+++ b/umfpack.pc.in
@@ -0,0 +1,12 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: @PACKAGE_NAME@
+Description: Sparse multifrontal LU factorization
+Version: @PACKAGE_VERSION@
+Requires.private: @UMFPACK_REQUIRES@
+Libs: -L${libdir} -lumfpack
+Libs.private: @BLAS_LIBS@ -lm
+Cflags: -I${includedir}/umfpack
