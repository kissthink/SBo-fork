#!/bin/sh

# Slackware build script for qemu-kvm

# Written by Stu Miller <slackbuilds@go4it2day.com>
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PRGNAM=qemu-kvm
VERSION=${VERSION:-0.14.0}
BUILD=${BUILD:-2}
TAG=${TAG:-_SBo}

KVMGROUP=${KVMGROUP:-kvm}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# The script builds only x86 and x86_64 Linux Target CPU emulators by default.
# Available Linux Target CPUs for full system emulation are:
#     i386 x86_64 arm cris m68k microblaze mips mipsel mips64 mips64el
#     ppc ppcemb ppc64 sh4 sh4eb sparc sparc64
# Available Linux Target CPUs for user mode emulation are:
#     i386 x86_64 alpha arm armeb cris m68k microblaze mips mipsel
#     ppc ppc64 ppc64abi32 sh4 sh4eb sparc sparc64 sparc32plus
#
# If you need to emulate all target CPUs, set BUILD_ARCH to "all" but be
# aware that the compilation will take a lot longer, and you should really
# be using plain "qemu" for the others (since they can't use the KVM stuff
# anyway.  The default "x86_64" value works fine for for 32-bit or 64-bit 
# QEMU-KVM hosts providing full system emulation supporting Linux, BSD, and 
# Windows guests. 

BUILD_ARCH=${BUILD_ARCH:-x86_64}
[ "$BUILD_ARCH" = "all" ] && unset BUILD_ARCH

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
fi

# Needed to build man pages if build is ran from su
export PATH=$PATH:/usr/share/texmf/bin

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.gz
cd $PRGNAM-$VERSION
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# Fixup the udev rules file to remove the NAME="%k" and allow for a different
# group to be used (no real need to require a kvm group)
patch -p1 < $CWD/fixup_udev_rules.patch

# Replace obsolete qemu-kvm.h with kvm.h in pci.c and build that module
# just like upstream does. This fixes non-x86 targets which have no PCI
# support. http://www.mail-archive.com/kvm@vger.kernel.org/msg50038.html
patch -p1 < $CWD/fixup-undefined-pci-references.patch

# This translates the possible targets into the correct format for configure
TARGETS="$(for i in $BUILD_ARCH ; do printf "$i-softmmu " ; done)"

CFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --sysconfdir=/etc \
  --enable-mixemu \
  --audio-drv-list=oss,alsa,sdl,esd \
  --enable-system \
  --target-list="$TARGETS"

make \
  mandir=/usr/man \
  docdir=/usr/doc/$PRGNAM-$VERSION
make install \
  mandir=/usr/man \
  docdir=/usr/doc/$PRGNAM-$VERSION \
  DESTDIR=$PKG
cp -a kvm/kvm_stat $PKG/usr/bin/

mkdir -p $PKG/lib/udev/rules.d/
sed "s/@GROUP@/$KVMGROUP/" kvm/scripts/65-kvm.rules \
  > $PKG/lib/udev/rules.d/65-kvm.rules

find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 {} \;
find $PKG/usr/man -type f -exec chmod 0644 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a kvm/scripts $PKG/usr/doc/$PRGNAM-$VERSION/
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
