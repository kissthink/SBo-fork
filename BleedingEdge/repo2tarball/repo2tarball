#!/bin/bash

# Download from a source control repo and create a tarball
# David Spencer <baildon.research@googlemail.com>
# Inspired by ffmpeg-mksrctarball.sh from SBo and its many derivatives

set -e
me="$(basename $0)"
shopt -u sourcepath

#-----------------------------------------------------------------------
# Read and validate the info file.

REPOINFO="$1"
if [ "$REPOINFO" = "" ];then
  echo "$me: Usage: $me pathname" >&2
  exit 2
elif [ "${REPOINFO:0:1}" = "-" ]; then
  :
elif [ -e "$REPOINFO" ]; then
  . "$REPOINFO"
  shift
elif [ -e "$REPOINFO".repoinfo ]; then
  . "$REPOINFO".repoinfo
  shift
else
  echo "$me: $REPOINFO not found." >&2
  exit 2
fi

while getopts "f:p:t:u:b:r:e:z:o:" opt; do
  echo "opt=$opt OPTARG=$OPTARG"
  case $opt in
  f) if [ -e "$OPTARG" ]; then
        . "$OPTARG"
     else
       echo "$me: $OPTARG not found." >&2
       exit 2
     fi
     ;;
  p) PRGNAM="$OPTARG" ;;
  t) TYPE="$OPTARG" ;;
  u) URL="$OPTARG" ;;
  b) BRANCH="$OPTARG" ;;
  r) REVISION="$OPTARG" ;;
  e) EXPORT="$OPTARG" ;;
  z) COMPRESS="$OPTARG" ;;
  o) OUTPUT="$OPTARG" ;;
  esac
done

# PRGNAM -- no default.
if [ "$PRGNAM" = "" ]; then
  echo "$me: PRGNAM must be specified." >&2
  exit 2
fi

# TYPE -- must be "git" or "svn"/"subversion", no default.
case "${TYPE}" in
git)  ;;
svn | subversion)
      TYPE="svn"
      ;;
cvs | mercurial | hg | bazaar | bzr)
      echo "$me: TYPE=\"$TYPE\" is not yet supported." >&2
      exit 2
      ;;
'')   echo "$me: TYPE must be specified." >&2
      exit 2
      ;;
*)    echo "$me: TYPE=\"$TYPE\" is not a valid repo type." >&2
      exit 2
      ;;
esac

# URL -- no default.
if [ "$URL" = "" ]; then
  echo "$me: URL must be specified." >&2
  exit 2
fi

# BRANCH
case $TYPE in
git)
  # BRANCH is used to determine what's pulled and merged, and also used
  # to determine the revision if REVISION isn't specified
  if [ "$REVISION" = "" ]; then
    REVISION="$BRANCH"
  fi
  ;;
svn)
  # Always ignore BRANCH (set it in the URL instead)
  : ;;
esac

# REVISION
case $TYPE in
git)
  : ;;
svn)
  # Massage it into REVSPEC
  if [ "$REVISION" = "" ]; then
    REVSPEC=""
  else
    REVSPEC="-r $REVISION"
  fi
  ;;
esac

# EXPORT -- default is "y".  We won't actually do an export :-)
case "$EXPORT" in
  y* | Y* | t* | T* | '') EXCLUDE='--exclude-vcs' ;;
  n* | N* | f* | F* )     EXCLUDE='' ;;
  *)  echo "$me: EXPORT must be Y or N." >&2
      exit 2
      ;;
esac

# COMPRESS -- default is "gz".
case "$COMPRESS" in
  bzip2 | bz2 )
    ZCMD="bzip2"; ZEXT="bz2" ;;
  gzip | gz | '')
    ZCMD="gzip"; ZEXT="gz" ;;
  *)
    # or maybe something exotic :-)
    ZCMD="$COMPRESS"; ZEXT="$COMPRESS" ;;
esac

# OUTPUT
if [ "$OUTPUT"="" ]; then
  OUTPUT="$(pwd)"
fi

#-----------------------------------------------------------------------
# Create or update the local working copy.

if [ ! -d $PRGNAM-$TYPE ]; then
  mkdir $PRGNAM-$TYPE
fi

if [ -d $PRGNAM-$TYPE/.$TYPE ]; then
  ( cd $PRGNAM-$TYPE
    echo "$me: Updating $PRGNAM from $URL"
    case $TYPE in
      git)
        git checkout $BRANCH
        git pull $URL $BRANCH
        ;;
      svn)
        svn switch $REVSPEC $URL
        ;;
    esac
  )
else
  echo "$me: Downloading $PRGNAM from $URL"
  case $TYPE in
    git)
      git clone $URL $PRGNAM-$TYPE
      if [ "$REVISION" != "" ]; then
        ( cd $PRGNAM-$TYPE; git checkout -q $REVISION )
      fi
      ;;
    svn)
      svn checkout $REVSPEC $URL $PRGNAM-$TYPE
      ;;
  esac
fi

#-----------------------------------------------------------------------
# Process the working copy.

( cd $PRGNAM-$TYPE

  case $TYPE in
    git)  BRANCH=$(git branch --contains HEAD | head -1 | sed 's/^\* //')
          REVISION=$(git rev-list --max-count=1 HEAD | cut -c1-7)
          ;;
    svn)  BRANCH=$(basename $(svn info | grep '^URL:' | sed 's/^URL: //'))
          REVISION=$(svnversion)
          ;;
  esac
  VERSION="${VERSION:-$(echo $BRANCH | sed 's/-/_/g').$REVISION}"
  echo "$me: Creating $OUTPUT/$PRGNAM-$VERSION.tar.$ZEXT"
  tar -c --transform="s/^\\./$PRGNAM-$VERSION/" $EXCLUDE . | \
    $ZCMD > $OUTPUT/$PRGNAM-$VERSION.tar.$ZEXT

)

exit 0
